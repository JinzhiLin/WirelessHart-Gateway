function GetUnitCodeName(unitcode){	
	switch (unitcode) {
	case 1  : return 'inches of water at 68 degrees F';
	case 2  : return 'inches of mercury at 0 degrees C';
	case 3  : return 'feet of water at 68 degrees F';
	case 4  : return 'millimeters of water at 68 degrees F';
	case 5  : return 'millimeters of mercury at 0 degrees C';
	case 6  : return 'pounds per square inch';
	case 7  : return 'bars';
	case 8  : return 'millibars';
	case 9  : return 'grams per square centimeter';
	case 10 : return 'kilograms per square centimeter';
	case 11 : return 'pascals';
	case 12 : return 'kilopascals';
	case 13 : return 'torr';
	case 14 : return 'atmospheres';
	case 15 : return 'cubic feet per minute';
	case 16 : return 'gallons per minute';
	case 17 : return 'liters per minute';
	case 18 : return 'imperial gallons per minute';
	case 19 : return 'cubic meter per hour';
	case 20 : return 'feet per second';
	case 21 : return 'meters per second';
	case 22 : return 'gallons per second';
	case 23 : return 'million gallons per day';
	case 24 : return 'liters per second';
	case 25 : return 'million liters per day';
	case 26 : return 'cubic feet per second';
	case 27 : return 'cubic feet per day';
	case 28 : return 'cubic meters per second';
	case 29 : return 'cubic meters per day';
	case 30 : return 'imperial gallons per hour';
	case 31 : return 'imperial gallons per day';
	case 32 : return 'Degrees Celsius';
	case 33 : return 'Degrees Fahrenheit';
	case 34 : return 'Degrees Rankine';
	case 35	: return 'elvin';
	case 36 : return 'millivolts';
	case 37 : return 'ohms';
	case 38 : return 'hertz';
	case 39 : return 'milliamperes';
	case 40 : return 'gallons';
	case 41 : return 'liters';
	case 42 : return 'imperial gallons';
	case 43 : return 'cubic meters';
	case 44 : return 'feet';
	case 45 : return 'meters';
	case 46 : return 'barrels (1 barrel equals 42 U.S. gallons)';
	case 47 : return 'inches';
	case 48 : return 'centimeters';
	case 49 : return 'millimeters';
	case 50 : return 'minutes';
	case 51 : return 'seconds';
	case 52 : return 'hours';
	case 53 : return 'days';
	case 54 : return 'centistokes';
	case 55 : return 'centipoise';
	case 56 : return 'microsiemens';
	case 57 : return 'percent';
	case 58 : return 'volts';
	case 59 : return 'pH';
	case 60 : return 'grams';
	case 61 : return 'kilograms';
	case 62 : return 'metric tons';
	case 63 : return 'pounds';
	case 64 : return 'short tons';
	case 65 : return 'long tons';
	case 66 : return 'milli siemens per centimeter';
	case 67 : return 'micro siemens per centimeter';
	case 68 : return 'newton';
	case 69 : return 'newton meter';
	case 70 : return 'grams per second';
	case 71 : return 'grams per minute';
	case 72 : return 'grams per hour';
	case 73 : return 'kilograms per second';
	case 74 : return 'kilograms per minute';
	case 75 : return 'kilograms per hour';
	case 76 : return 'kilograms per day';
	case 77 : return 'metric tons per minute';
	case 78 : return 'metric tons per hour';
	case 79 : return 'metric tons per day';
	case 80 : return 'pounds per second';
	case 81 : return 'pounds per minute';
	case 82 : return 'pounds per hour';
	case 83 : return 'pounds per day';
	case 84 : return 'short tons per minute';
	case 85 : return 'short tons per hour';
	case 86 : return 'short tons per day';
	case 87 : return 'long tons per hour';
	case 88 : return 'long tons per day';
	case 89 : return 'deka therm';
	case 90 : return 'specific gravity units';
	case 91 : return 'grams per cubic centimeter';
	case 92 : return 'kilograms per cubic meter';
	case 93 : return 'pounds per gallon';
	case 94 : return 'pounds per cubic foot';
	case 95 : return 'grams per milliliter';
	case 96 : return 'kilograms per liter';
	case 97 : return 'grams per liter';
	case 98 : return 'pounds per cubic inch';
	case 99 : return 'short tons per cubic yard';
	case 100 : return 'degrees twaddell';
	case 101 : return 'degrees brix';
	case 102 : return 'degrees baume heavy';
	case 103 : return 'degrees baume light';
	case 104 : return 'degrees API';
	case 105 : return 'percent solids per weight';
	case 106 : return 'percent solids per volume';
	case 107 : return 'degrees balling';
	case 108 : return 'proof per volume';
	case 109 : return 'proof per mass';
	case 110 : return 'bushels';
	case 111 : return 'cubic yards';
	case 112 : return 'cubic feet';
	case 113 : return 'cubic inches';
	case 114 : return 'inches per second';
	case 115 : return 'inches per minute';
	case 116 : return 'feet per minute';
	case 117 : return 'degrees per second';
	case 118 : return 'revolutions per second';
	case 119 : return 'revolutions per minute';
	case 120 : return 'meters per hour';
	case 121 : return 'normal cubic meter per hour (MKS System)';
	case 122 : return 'normal liter per hour (MKS System)';
	case 123 : return 'standard cubic feet per minute (U.S. System)';
	case 124 : return 'bbl liq (1 liquid barrel equals 31.5 U.S. gallons)';
	case 125 : return 'ounce';
	case 126 : return 'foot pound force';
	case 127 : return 'kilo watt';
	case 128 : return 'kilo watt hour';
	case 129 : return 'horsepower';
	case 130 : return 'cubic feet per hour';
	case 131 : return 'cubic meters per minute';
	case 132 : return 'barrels per second (1 barrel equals 42 U.S. gallons)';
	case 133 : return 'barrels per minute (1 barrel equals 42 U.S. gallons)';
	case 134 : return 'barrels per hour (1 barrel equals 42 U.S. gallons)';
	case 135 : return 'barrels per day (1 barrel equals 42 U.S. gallons)';
	case 136 : return 'gallons per hour';
	case 137 : return 'imperial gallons per second';
	case 138 : return 'liters per hour';
	case 139 : return 'parts per million';
	case 140 : return 'mega calorie per hour (1 calorie = 4.184 Joules)';
	case 141 : return 'mega joule per hour';
	case 142 : return 'british thermal unit per hour (1 Btu=0.2519958kcal Energy)';
	case 143 : return 'degrees';
	case 144 : return 'radian';
	case 145 : return 'inches of water at 60 degrees F';
	case 146 : return 'micrograms per liter';
	case 147 : return 'micrograms per cubic meter';
	case 148 : return 'percent consistency';
	case 149 : return 'volume percent';
	case 150 : return 'percent steam quality';
	case 151 : return 'feet in sixteenths';
	case 152 : return 'cubic feet per pound';
	case 153 : return 'picofarads';
	case 154 : return 'mililiters per liter';
	case 155 : return 'microliters per liter';
	case 160 : return 'percent plato';
	case 161 : return 'percent lower explosion level';
	case 162 : return 'mega calorie (1 calorie = 4.184 Joules)';
	case 163 : return 'kohms';
	case 164 : return 'mega joule';
	case 165 : return 'british thermal unit (1Btu=0.2519958kcal Energy)';
	case 166 : return 'normal cubic meter (MKS System)';
	case 167 : return 'normal liter (MKS System)';
	case 168 : return 'standard cubic feet (U.S. System)';
	case 169 : return 'parts per billion';
	case 235 : return 'gallons per day';
	case 236 : return 'hectoliters';
	case 237 : return 'megapascals';
	case 238 : return 'inches of water at 4 degrees C';
	case 239 : 'millimeters of water at 4 degrees C';
	case 240 :
	case 241 :	
	case 242 :  
	case 243 :
	case 244 :
	case 245 :
	case 246 :
	case 247 :
	case 248 :		
	case 249 : return 'Enumeration may be used for manufacturer specific definitions';
	case 250 : return 'Not Used';
	case 251 : return 'None';
	case 252 : return 'Unknown';
	case 253 : return 'Special';
	default: return NAString
	}
}


function GetClassificationName(classificationCode){
	switch(classificationCode){
	case 0:		return 'Device Variable Not Classified';
	case 64:	return 'Temperature';
	case 65:	return 'Pressure';
	case 66:	return 'Volumetric Flow';
	case 67:	return 'Velocity';
	case 68:	return 'Volume';
	case 69:	return 'Length';
	case 70:	return 'Time';
	case 71:	return 'Mass';
	case 72:	return 'Mass Flow';
	case 73:	return 'Mass Per Volume';
	case 74:	return 'Viscosity';
	case 75:	return 'Angular Velocity';
	case 76:	return 'Area';
	case 77:	return 'Energy (Work)';
	case 78:	return 'Force';
	case 79:	return 'Power';
	case 80:	return 'Frequency';
	case 81:	return 'Analytical';
	case 82:	return 'Capacitance';
	case 83:	return 'Emf';
	case 84:	return 'Current';
	case 85:	return 'Resistance';
	case 86:	return 'Angle';
	case 87:	return 'Conductance';
	case 88:	return 'Volume Per Volume';
	case 89:	return 'Volume Per Mass';
	case 90:	return 'Concentration';
	case 91:	return 'Valve Actuator';
	case 92:	return 'Level';
	case 93:	return 'Vortex Flow';
	case 94:	return 'Mag Flow';
	case 95:	return 'Coriolis Flow';
	default: 	return NAString 	
	}	
}